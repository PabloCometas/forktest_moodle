{"version":3,"file":"manage_rules.min.js","sources":["../src/manage_rules.js"],"sourcesContent":["// This file is part of Moodle - https://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <https://www.gnu.org/licenses/>.\n\n/**\n * Manage rules JS module.\n *\n * @module     tool_dynamic_cohorts/manage_rules\n * @copyright  2024 Catalyst IT\n * @license    http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Ajax from 'core/ajax';\nimport Notification from 'core/notification';\nimport Templates from 'core/templates';\nimport ModalEvents from 'core/modal_events';\nimport {get_string as getString} from 'core/str';\nimport * as DynamicTable from 'core_table/dynamic';\nimport Fragment from 'core/fragment';\nimport ModalCancel from 'core/modal_cancel';\nimport DynamicTableSelectors from 'core_table/local/dynamic/selectors';\nimport {add as notifyUser} from 'core/toast';\nimport ModalForm from 'core_form/modalform';\n\n/**\n * A list of used selectors.\n */\nconst SELECTORS = {\n    RULE_MATCHING_USERS: 'tool-dynamic-cohorts-matching-users',\n    RULE_CONDITIONS: '.tool-dynamic-cohorts-condition-view',\n    RULE_TOGGLE: '.tool-dynamic-cohorts-rule-toggle',\n    RULE_DELETE: '.tool-dynamic-cohorts-rule-delete',\n    RULE_EDIT: '.tool-dynamic-cohorts-rule-edit',\n    RULE_ADD: '[data-action=addrule]',\n};\n\n/**\n * Init of the module.\n */\nexport const init = () => {\n    initRuleAdd();\n    loadMatchingUsers(document);\n    initMatchingUsersModals(document);\n    initRuleConditionsModals(document);\n    initRuleToggle(document);\n    initRuleDelete(document);\n    initRuleEdit(document);\n\n    document.addEventListener(DynamicTable.Events.tableContentRefreshed, e => {\n        const tableRoot = DynamicTable.getTableFromId(e.target.dataset.tableUniqueid);\n\n        initMatchingUsersModals(tableRoot);\n        loadMatchingUsers(tableRoot);\n        initRuleConditionsModals(tableRoot);\n        initRuleToggle(tableRoot);\n        initRuleDelete(tableRoot);\n        initRuleEdit(tableRoot);\n    });\n};\n\n/**\n * Initialise modals for matching users.\n *\n * @param {Element} root\n */\nconst initMatchingUsersModals = (root) => {\n    Array.from(root.getElementsByClassName(SELECTORS.RULE_MATCHING_USERS)).forEach((collection) => {\n        const ruleid = collection.dataset.ruleid;\n        const link = collection.children[1];\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            displayMatchingUsers(ruleid);\n        });\n    });\n};\n\n/**\n * Display matching users in the modal form.\n *\n * @param {string} ruleid\n */\nconst displayMatchingUsers = (ruleid) => {\n\n    ModalCancel.create({\n        title: getString('matchingusers', 'tool_dynamic_cohorts'),\n        body: getMatchingUsersModalBody(ruleid),\n        large: true,\n    }).then(function (modal) {\n        modal.getRoot().on(ModalEvents.hidden, function() {\n            modal.destroy();\n        });\n\n        modal.show();\n    });\n};\n\n/**\n * Get modal html body for matching users using fragment API.\n *\n * @param {string} ruleid\n * @returns {Promise}\n */\nconst getMatchingUsersModalBody = (ruleid) => {\n    const params = {\n        ruleid: ruleid,\n    };\n\n    return Fragment.loadFragment('tool_dynamic_cohorts', 'matching_users', 1, params);\n};\n\n/**\n * Load matching users for each rule.\n *\n * @param {Element} root\n */\nconst loadMatchingUsers = (root) => {\n    Array.from(root.getElementsByClassName(SELECTORS.RULE_MATCHING_USERS)).forEach((collection) => {\n        const ruleid = collection.dataset.ruleid;\n        const loader = collection.children[0];\n        const link = collection.children[1];\n\n        Ajax.call([{\n            methodname: 'tool_dynamic_cohorts_get_total_matching_users_for_rule',\n            args: {ruleid: ruleid},\n            done: function (number) {\n                link.children[0].append(number.toLocaleString().replace(/,/g, \" \"));\n                loader.classList.add('hidden');\n                link.classList.remove('hidden');\n            },\n            fail: function (response) {\n                Notification.exception(response);\n            }\n        }]);\n    });\n};\n\n/**\n * Initialise displaying each rule conditions in a modal.\n *\n * @param {Element} root\n */\nconst initRuleConditionsModals = (root) => {\n    root.querySelectorAll(SELECTORS.RULE_CONDITIONS).forEach(link => {\n        let ruleid = link.dataset.ruleid;\n        link.addEventListener('click', function() {\n            Ajax.call([{\n                methodname: 'tool_dynamic_cohorts_get_conditions',\n                args: {ruleid: ruleid},\n                done: function (conditions) {\n                    Templates.render(\n                        'tool_dynamic_cohorts/conditions',\n                        {'conditions' : conditions, 'hidecontrols': true}\n                    ).then(function(html) {\n                        ModalCancel.create({\n                            title: getString('conditionsformtitle', 'tool_dynamic_cohorts'),\n                            body: html,\n                            large: true,\n                        }).then(function (modal) {\n                            modal.getRoot().on(ModalEvents.hidden, function() {\n                                modal.destroy();\n                            });\n                            modal.show();\n                        });\n                    }).fail(function(response) {\n                        Notification.exception(response);\n                    });\n                },\n                fail: function (response) {\n                    Notification.exception(response);\n                }\n            }]);\n        });\n    });\n};\n\n/**\n * Send feedback to a user.\n *\n * @param {string} action Action to send feedback about.\n */\nconst sendFeedback = (action) => {\n    getString('completed:' + action, 'tool_dynamic_cohorts')\n        .then(message => {\n            notifyUser(message);\n        }).catch(Notification.exception);\n};\n\n/**\n * Send warning to a user.\n */\nconst sendWarning = () => {\n    getString('ruledisabledpleasereview', 'tool_dynamic_cohorts')\n        .then(message => {\n            notifyUser(message, {type: 'warning', closeButton: true, delay: 10000});\n        }).catch(Notification.exception);\n};\n\n/**\n * Get dynamic table root.\n * @returns {*}\n */\nconst getTableRoot = () => {\n    return document.querySelector(DynamicTableSelectors.main.region);\n};\n\n/**\n * Initialise displaying each rule conditions in a modal.\n *\n * @param {Element} root\n */\nconst initRuleToggle = (root) => {\n    root.querySelectorAll(SELECTORS.RULE_TOGGLE).forEach(link => {\n        let ruleid = link.dataset.ruleid;\n        let action = link.dataset.action;\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            Notification.confirm(\n                getString('confirm', 'moodle'),\n                getString(action + '_confirm', 'tool_dynamic_cohorts'),\n                getString('yes', 'moodle'),\n                getString('no', 'moodle'),\n                function () {\n                    Ajax.call([{\n                        methodname: 'tool_dynamic_cohorts_toggle_rule_status',\n                        args: {ruleid: ruleid},\n                        done: function () {\n                            sendFeedback(action);\n                            DynamicTable.refreshTableContent(getTableRoot())\n                                .catch(Notification.exception);\n                        },\n                        fail: function (response) {\n                            Notification.exception(response);\n                        }\n                    }]);\n                });\n        });\n    });\n};\n\n/**\n * Initialise displaying each rule conditions in a modal.\n *\n * @param {Element} root\n */\nconst initRuleDelete = (root) => {\n    root.querySelectorAll(SELECTORS.RULE_DELETE).forEach(link => {\n        let ruleid = link.dataset.ruleid;\n        let action = link.dataset.action;\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            Notification.confirm(\n                getString('confirm', 'moodle'),\n                getString(action + '_confirm', 'tool_dynamic_cohorts', ruleid),\n                getString('yes', 'moodle'),\n                getString('no', 'moodle'),\n                function () {\n                    Ajax.call([{\n                        methodname: 'tool_dynamic_cohorts_delete_rules`',\n                        args: {ruleids: {ruleid}},\n                        done: function () {\n                            sendFeedback(action);\n                            DynamicTable.refreshTableContent(getTableRoot())\n                                .catch(Notification.exception);\n                        },\n                        fail: function (response) {\n                            Notification.exception(response);\n                        }\n                    }]);\n                });\n        });\n    });\n};\n\n/**\n * Initialise action to add a new rule.\n */\nconst initRuleAdd = () => {\n    // Add listener to the click event that will load the form.\n    document.querySelector(SELECTORS.RULE_ADD).addEventListener('click', (e) => {\n        e.preventDefault();\n        const modalForm= getRuleForm(0, 'add');\n        modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n            sendFeedback('add');\n            sendWarning();\n            DynamicTable.refreshTableContent(getTableRoot())\n                .catch(Notification.exception);\n        });\n\n        modalForm.show();\n    });\n};\n\n/**\n * Initialise action to edit rule in modal form.\n *\n * @param {Element} root\n */\nconst initRuleEdit = (root) => {\n    root.querySelectorAll(SELECTORS.RULE_EDIT).forEach(link => {\n        link.addEventListener('click', function(e) {\n            e.preventDefault();\n            let ruleid = link.dataset.ruleid;\n\n            const modalForm= getRuleForm(ruleid, 'edit');\n            modalForm.addEventListener(modalForm.events.FORM_SUBMITTED, () => {\n                sendFeedback('update');\n                sendWarning();\n                DynamicTable.refreshTableContent(getTableRoot())\n                    .catch(Notification.exception);\n            });\n\n            modalForm.show();\n        });\n    });\n};\n\n/**\n * Get rule modal form.\n *\n * @param {string} ruleid\n * @param {string} action\n * @returns {ModalForm}\n */\nconst getRuleForm = (ruleid, action) => {\n    return new ModalForm({\n        formClass: \"tool_dynamic_cohorts\\\\rule_form\",\n        args: {id: ruleid},\n        modalConfig: {title: getString(action + '_rule', 'tool_dynamic_cohorts')},\n    });\n};\n"],"names":["SELECTORS","initRuleAdd","loadMatchingUsers","document","initMatchingUsersModals","initRuleConditionsModals","initRuleToggle","initRuleDelete","initRuleEdit","addEventListener","DynamicTable","Events","tableContentRefreshed","e","tableRoot","getTableFromId","target","dataset","tableUniqueid","root","Array","from","getElementsByClassName","forEach","collection","ruleid","children","preventDefault","displayMatchingUsers","create","title","body","getMatchingUsersModalBody","large","then","modal","getRoot","on","ModalEvents","hidden","destroy","show","params","Fragment","loadFragment","loader","link","call","methodname","args","done","number","append","toLocaleString","replace","classList","add","remove","fail","response","exception","querySelectorAll","conditions","render","html","sendFeedback","action","message","catch","Notification","sendWarning","type","closeButton","delay","getTableRoot","querySelector","DynamicTableSelectors","main","region","confirm","refreshTableContent","ruleids","modalForm","getRuleForm","events","FORM_SUBMITTED","ModalForm","formClass","id","modalConfig"],"mappings":"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"}